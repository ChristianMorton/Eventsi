{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Firebase, { db } from \"../../config/Firebase\";\nexport var UPDATE_EMAIL = \"UPDATE_EMAIL\";\nexport var UPDATE_PASSWORD = \"UPDATE_PASSWORD\";\nexport var UPDATE_NAME = \"UPDATE_NAME\";\nexport var LOGIN = \"LOGIN\";\nexport var SIGNUP = \"SIGNUP\";\nexport var updateEmail = function updateEmail(email) {\n  return {\n    type: UPDATE_EMAIL,\n    payload: email\n  };\n};\nexport var updatePassword = function updatePassword(password) {\n  return {\n    type: UPDATE_PASSWORD,\n    payload: password\n  };\n};\nexport var updateName = function updateName(name) {\n  return {\n    type: UPDATE_NAME,\n    payload: name\n  };\n};\nexport var login = function login() {\n  return function _callee(dispatch, getState) {\n    var _getState$user, email, password, response;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _getState$user = getState().user, email = _getState$user.email, password = _getState$user.password;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.auth().signInWithEmailAndPassword(email, password));\n\n          case 4:\n            response = _context.sent;\n            dispatch(getUser(response.user.uid));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};\nexport var getUser = function getUser(uid) {\n  return function _callee2(dispatch, getState) {\n    var user;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(db.collection(\"users\").doc(uid).get());\n\n          case 3:\n            user = _context2.sent;\n            dispatch({\n              type: LOGIN,\n              payload: user.data()\n            });\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            alert(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var signup = function signup() {\n  return function _callee3(dispatch, getState) {\n    var _getState$user2, email, password, name, response, res;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _getState$user2 = getState().user, email = _getState$user2.email, password = _getState$user2.password, name = _getState$user2.name;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.auth().createUserWithEmailAndPassword(email, password));\n\n          case 4:\n            response = _context3.sent;\n\n            if (!response.user.uid) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(db.collection(\"users\").doc(response.user.uid).set({\n              uid: response.user.uid,\n              email: email,\n              name: name\n            }));\n\n          case 8:\n            res = _context3.sent;\n\n            if (res) {\n              dispatch({\n                type: SIGNUP,\n                payload: response.user\n              });\n            }\n\n          case 10:\n            _context3.next = 16;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](0);\n            alert(_context3.t0);\n            console.log(_context3.t0);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/redux/actions/user.js"],"names":["Firebase","db","UPDATE_EMAIL","UPDATE_PASSWORD","UPDATE_NAME","LOGIN","SIGNUP","updateEmail","email","type","payload","updatePassword","password","updateName","name","login","dispatch","getState","user","auth","signInWithEmailAndPassword","response","getUser","uid","console","log","collection","doc","get","data","alert","signup","createUserWithEmailAndPassword","set","res"],"mappings":"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","sourcesContent":["import Firebase, { db } from \"../../config/Firebase\";\n\n// define types\n\nexport const UPDATE_EMAIL = \"UPDATE_EMAIL\";\nexport const UPDATE_PASSWORD = \"UPDATE_PASSWORD\";\nexport const UPDATE_NAME = \"UPDATE_NAME\";\nexport const LOGIN = \"LOGIN\";\nexport const SIGNUP = \"SIGNUP\";\n\n// actions\n\nexport const updateEmail = (email) => {\n  return {\n    type: UPDATE_EMAIL,\n    payload: email,\n  };\n};\n\nexport const updatePassword = (password) => {\n  return {\n    type: UPDATE_PASSWORD,\n    payload: password,\n  };\n};\n\nexport const updateName = (name) => {\n  return {\n    type: UPDATE_NAME,\n    payload: name,\n  };\n};\n\nexport const login = () => {\n  return async (dispatch, getState) => {\n    try {\n      const { email, password } = getState().user;\n      const response = await Firebase.auth().signInWithEmailAndPassword(\n        email,\n        password\n      );\n      dispatch(getUser(response.user.uid));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\n\nexport const getUser = (uid) => {\n  return async (dispatch, getState) => {\n    try {\n      const user = await db.collection(\"users\").doc(uid).get();\n\n      dispatch({ type: LOGIN, payload: user.data() });\n    } catch (e) {\n      alert(e);\n    }\n  };\n};\n\nexport const signup = () => {\n  return async (dispatch, getState) => {\n    try {\n      const { email, password, name } = getState().user;\n      const response = await Firebase.auth().createUserWithEmailAndPassword(\n        email,\n        password\n      );\n\n      if (response.user.uid) {\n        const res = await db.collection(\"users\").doc(response.user.uid).set({\n          uid: response.user.uid,\n          email: email,\n          name: name,\n        });\n\n        if (res) {\n          dispatch({ type: SIGNUP, payload: response.user });\n        }\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}