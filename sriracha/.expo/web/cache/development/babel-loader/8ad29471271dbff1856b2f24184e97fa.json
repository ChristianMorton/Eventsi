{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianmorton/Eventsi/sriracha/src/components/ChatTab.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport { db } from \"../config/Firebase\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase\";\n\nvar ChatTab = function ChatTab(_ref) {\n  var id = _ref.id,\n      currentuser = _ref.currentuser;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var chatCollection = db.collection(\"events\").doc(id).collection(\"chat\");\n  useEffect(function () {\n    var unsub = chatCollection.orderBy(\"timestamp\").limit(20).onSnapshot(function (snapshot) {\n      snapshot.docChanges().forEach(function (change) {\n        if (change.type === \"added\") {\n          console.log(\"added data\");\n\n          var _change$doc$data = change.doc.data(),\n              name = _change$doc$data.name,\n              text = _change$doc$data.text,\n              timestamp = _change$doc$data.timestamp,\n              _user = _change$doc$data.user;\n\n          var _id = change.doc.id;\n          var messageToPush = {\n            _id: _id,\n            name: name,\n            text: text,\n            timestamp: timestamp.toDate(),\n            user: _user\n          };\n          var temp = messages;\n          temp.unshift(messageToPush);\n          setMessages(temp);\n        }\n\n        if (change.type === \"modified\") {\n          console.log(\"Modified message: \", change.doc.data());\n        }\n\n        if (change.type === \"removed\") {\n          console.log(\"Removed message: \", change.doc.data());\n        }\n      });\n    });\n    return function () {\n      return unsub();\n    };\n  }, []);\n\n  var getTimestamp = function getTimestamp() {\n    return new firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n  };\n\n  var sendMessage = function sendMessage(messages) {\n    for (var i = 0; i < messages.length; i++) {\n      var _messages$i = messages[i],\n          text = _messages$i.text,\n          _user2 = _messages$i.user;\n      var _id = _user2._id;\n      var message = {\n        text: text,\n        name: _user2.name,\n        uid: _id,\n        user: _user2,\n        timestamp: getTimestamp()\n      };\n      chatCollection.add(message);\n    }\n  };\n\n  var parse = function parse(snapshot) {\n    var _snapshot$val = snapshot.val(),\n        numberStamp = _snapshot$val.timestamp,\n        text = _snapshot$val.text,\n        user = _snapshot$val.user;\n\n    var _id = snapshot.key;\n    var timestamp = new Date(numberStamp);\n    var message = {\n      _id: _id,\n      timestamp: timestamp,\n      text: text,\n      user: user\n    };\n    return message;\n  };\n\n  var user = function user() {\n    return {\n      name: currentuser.name,\n      _id: firebase.auth().currentUser.uid\n    };\n  };\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    onSend: sendMessage,\n    user: user(),\n    scrollToBottom: true,\n    style: {\n      backgroundColor: \"#f9e9d2\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  });\n};\n\nvar styles = StyleSheet.create({});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentuser: state.user\n  };\n};\n\nexport default connect(mapStateToProps)(ChatTab);","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/components/ChatTab.js"],"names":["React","useState","useEffect","GiftedChat","db","connect","firebase","ChatTab","id","currentuser","messages","setMessages","chatCollection","collection","doc","unsub","orderBy","limit","onSnapshot","snapshot","docChanges","forEach","change","type","console","log","data","name","text","timestamp","user","_id","messageToPush","toDate","temp","unshift","getTimestamp","firestore","Timestamp","fromDate","Date","now","sendMessage","i","length","message","uid","add","parse","val","numberStamp","key","auth","currentUser","backgroundColor","styles","StyleSheet","create","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { GiftedChat } from \"react-native-gifted-chat\";\nimport { db } from \"../config/Firebase\";\nimport { connect } from \"react-redux\";\nimport * as firebase from \"firebase\";\n\nconst ChatTab = ({ id, currentuser }) => {\n  const [messages, setMessages] = useState([]);\n\n  const chatCollection = db.collection(\"events\").doc(id).collection(\"chat\");\n\n  useEffect(() => {\n    const unsub = chatCollection\n      .orderBy(\"timestamp\")\n      .limit(20)\n      .onSnapshot(function (snapshot) {\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type === \"added\") {\n            console.log(\"added data\");\n            const { name, text, timestamp, user } = change.doc.data();\n            const { id: _id } = change.doc;\n            const messageToPush = {\n              _id,\n              name,\n              text,\n              timestamp: timestamp.toDate(),\n              user,\n            };\n            const temp = messages;\n            temp.unshift(messageToPush);\n            setMessages(temp);\n          }\n          if (change.type === \"modified\") {\n            console.log(\"Modified message: \", change.doc.data());\n            // This is equivalent to child_changed\n          }\n          if (change.type === \"removed\") {\n            console.log(\"Removed message: \", change.doc.data());\n            // This is equivalent to child_removed\n          }\n        });\n      });\n    return () => unsub();\n  }, []);\n\n  const getTimestamp = () => {\n    return new firebase.firestore.Timestamp.fromDate(new Date(Date.now()));\n  };\n\n  const sendMessage = (messages) => {\n    for (let i = 0; i < messages.length; i++) {\n      const { text, user } = messages[i];\n      const { _id } = user;\n      const message = {\n        text,\n        name: user.name,\n        uid: _id,\n        user,\n        timestamp: getTimestamp(),\n      };\n\n      chatCollection.add(message);\n    }\n  };\n\n  const parse = (snapshot) => {\n    // 1.\n    const { timestamp: numberStamp, text, user } = snapshot.val();\n    const { key: _id } = snapshot;\n    // 2.\n    const timestamp = new Date(numberStamp);\n    // 3.\n    const message = {\n      _id,\n      timestamp,\n      text,\n      user,\n    };\n    return message;\n  };\n\n  const user = () => {\n    // Return our name and our UID for GiftedChat to parse\n    return {\n      name: currentuser.name,\n      _id: firebase.auth().currentUser.uid,\n    };\n  };\n\n  return (\n    <GiftedChat\n      messages={messages}\n      onSend={sendMessage}\n      user={user()}\n      scrollToBottom={true}\n      style={{ backgroundColor: \"#f9e9d2\" }}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({});\n\nconst mapStateToProps = (state) => {\n  return {\n    currentuser: state.user,\n  };\n};\n\nexport default connect(mapStateToProps)(ChatTab);\n"]},"metadata":{},"sourceType":"module"}