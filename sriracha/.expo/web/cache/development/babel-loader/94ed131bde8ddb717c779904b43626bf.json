{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianmorton/Eventsi/sriracha/src/components/DateTimeInput.js\";\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\nvar DateTimeInput = function DateTimeInput(_ref) {\n  var setDate = _ref.setDate,\n      date = _ref.date,\n      isDateOfEvent = _ref.isDateOfEvent,\n      _ref$isEndDate = _ref.isEndDate,\n      isEndDate = _ref$isEndDate === void 0 ? false : _ref$isEndDate;\n\n  var _useState = useState(\"date\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mode = _useState2[0],\n      setMode = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      show = _useState4[0],\n      setShow = _useState4[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === \"ios\");\n    setDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode(\"date\");\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode(\"time\");\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.safeAreaContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.touchableOpacity,\n    onPress: showDatepicker,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.dateInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, isDateOfEvent ? \"Start date of event\" : isEndDate ? \"End date\" : \"Reply by date\", \":\", \"  \", date.getDate(), \"/\", date.getMonth() + 1, \"/\", date.getYear() < 2000 ? date.getYear() + 1900 : date.getYear()))), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.touchableOpacity,\n    onPress: showTimepicker,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.dateInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, isDateOfEvent ? \"Start time of event\" : isEndDate ? \"End time\" : \"Reply by time\", \":\", \"  \", date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours(), \":\", date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()))), show && React.createElement(DateTimePicker, {\n    style: {\n      flex: 1,\n      alignSelf: \"stretch\"\n    },\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  dateInput: {\n    color: \"black\",\n    fontSize: 18,\n    fontWeight: \"600\"\n  },\n  safeAreaContainer: {\n    flex: 1,\n    backgroundColor: \"#f9e9d2\",\n    alignItems: \"center\"\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\"\n  },\n  touchableOpacity: {\n    marginVertical: 10,\n    borderRadius: 25,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 15,\n    width: \"80%\",\n    backgroundColor: \"#9AB7D2\"\n  }\n});\nexport default DateTimeInput;","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/components/DateTimeInput.js"],"names":["React","useState","DateTimePicker","DateTimeInput","setDate","date","isDateOfEvent","isEndDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","showMode","currentMode","showDatepicker","showTimepicker","styles","safeAreaContainer","container","touchableOpacity","dateInput","getDate","getMonth","getYear","getHours","getMinutes","flex","alignSelf","StyleSheet","create","color","fontSize","fontWeight","backgroundColor","alignItems","marginVertical","borderRadius","justifyContent","padding","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  Platform,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  SafeAreaView,\n} from \"react-native\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\nconst DateTimeInput = ({ setDate, date, isDateOfEvent, isEndDate = false }) => {\n  const [mode, setMode] = useState(\"date\");\n  const [show, setShow] = useState(false);\n\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setShow(Platform.OS === \"ios\");\n    setDate(currentDate);\n  };\n\n  const showMode = (currentMode) => {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  const showDatepicker = () => {\n    showMode(\"date\");\n  };\n\n  const showTimepicker = () => {\n    showMode(\"time\");\n  };\n\n  return (\n    <SafeAreaView style={styles.safeAreaContainer}>\n      <View style={styles.container}>\n        <View>\n          <TouchableOpacity\n            style={styles.touchableOpacity}\n            onPress={showDatepicker}\n          >\n            <Text style={styles.dateInput}>\n              {isDateOfEvent\n                ? \"Start date of event\"\n                : isEndDate\n                ? \"End date\"\n                : \"Reply by date\"}\n              :{\"  \"}\n              {date.getDate()}/{date.getMonth() + 1}/\n              {date.getYear() < 2000 ? date.getYear() + 1900 : date.getYear()}\n            </Text>\n          </TouchableOpacity>\n        </View>\n        <View>\n          <TouchableOpacity\n            style={styles.touchableOpacity}\n            onPress={showTimepicker}\n          >\n            <Text style={styles.dateInput}>\n              {isDateOfEvent\n                ? \"Start time of event\"\n                : isEndDate\n                ? \"End time\"\n                : \"Reply by time\"}\n              :{\"  \"}\n              {date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()}:\n              {date.getMinutes() < 10\n                ? \"0\" + date.getMinutes()\n                : date.getMinutes()}\n            </Text>\n          </TouchableOpacity>\n        </View>\n        {show && (\n          <DateTimePicker\n            style={{ flex: 1, alignSelf: \"stretch\" }}\n            testID=\"dateTimePicker\"\n            value={date}\n            mode={mode}\n            is24Hour={true}\n            display=\"default\"\n            onChange={onChange}\n          />\n        )}\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  dateInput: {\n    color: \"black\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  safeAreaContainer: {\n    flex: 1,\n    backgroundColor: \"#f9e9d2\",\n    alignItems: \"center\",\n  },\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    //justifyContent: \"center\",\n  },\n  touchableOpacity: {\n    marginVertical: 10,\n    borderRadius: 25,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 15,\n    width: \"80%\",\n    backgroundColor: \"#9AB7D2\",\n  },\n});\n\nexport default DateTimeInput;\n"]},"metadata":{},"sourceType":"module"}