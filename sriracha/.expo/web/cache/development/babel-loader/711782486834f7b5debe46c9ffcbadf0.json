{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianmorton/Eventsi/sriracha/src/navigation/TabNavigator.js\";\n\nimport React, { useEffect } from \"react\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { updateEmail, updatePassword, login, getUser } from \"../redux/actions/user\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport AppDrawer from \"../navigation/AppDrawer\";\nimport Firebase from \"../config/Firebase\";\nimport { EventsNavigator } from \"../navigation/EventsNavigator\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nvar Tab = createBottomTabNavigator();\n\nvar TabNavigator = function TabNavigator(_ref) {\n  var updateAuthState = _ref.updateAuthState,\n      getUser = _ref.getUser;\n  return React.createElement(Tab.Navigator, {\n    tabBarOptions: {\n      activeBackgroundColor: \"white\",\n      inactiveBackgroundColor: \"gray\",\n      activeTintColor: \"#000\",\n      inactiveTintColor: \"#fff\"\n    },\n    screenOptions: {\n      cardStyle: {\n        backgroundColor: \"#f9e9d2\"\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(Tab.Screen, {\n    options: {\n      tabBarLabel: \"Home\",\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var color = _ref2.color,\n            size = _ref2.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"home\",\n          color: color,\n          size: size,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }\n        });\n      }\n    },\n    name: \"Home\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, function (screenProps) {\n    return React.createElement(AppDrawer, _extends({}, screenProps, {\n      updateAuthState: updateAuthState,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }));\n  }), React.createElement(Tab.Screen, {\n    options: {\n      tabBarLabel: \"Events\",\n      tabBarIcon: function tabBarIcon(_ref3) {\n        var color = _ref3.color,\n            size = _ref3.size;\n        return React.createElement(MaterialCommunityIcons, {\n          name: \"calendar\",\n          color: color,\n          size: size,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }\n        });\n      }\n    },\n    name: \"Show Events\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, function (screenProps) {\n    return React.createElement(EventsNavigator, _extends({}, screenProps, {\n      updateAuthState: updateAuthState,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }));\n  }));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateEmail: updateEmail,\n    updatePassword: updatePassword,\n    login: login,\n    getUser: getUser\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabNavigator);","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/navigation/TabNavigator.js"],"names":["React","useEffect","createBottomTabNavigator","bindActionCreators","connect","updateEmail","updatePassword","login","getUser","HomeScreen","AppDrawer","Firebase","EventsNavigator","MaterialCommunityIcons","Tab","TabNavigator","updateAuthState","activeBackgroundColor","inactiveBackgroundColor","activeTintColor","inactiveTintColor","cardStyle","backgroundColor","tabBarLabel","tabBarIcon","color","size","screenProps","mapDispatchToProps","dispatch","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport {\n  updateEmail,\n  updatePassword,\n  login,\n  getUser,\n} from \"../redux/actions/user\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport AppDrawer from \"../navigation/AppDrawer\";\nimport Firebase from \"../config/Firebase\";\nimport { EventsNavigator } from \"../navigation/EventsNavigator\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nconst Tab = createBottomTabNavigator();\n\nconst TabNavigator = ({ updateAuthState, getUser }) => {\n  return (\n    <Tab.Navigator\n      tabBarOptions={{\n        activeBackgroundColor: \"white\",\n        inactiveBackgroundColor: \"gray\",\n        activeTintColor: \"#000\",\n        inactiveTintColor: \"#fff\",\n      }}\n      screenOptions={{\n        cardStyle: { backgroundColor: \"#f9e9d2\" },\n      }}\n    >\n      <Tab.Screen\n        options={{\n          tabBarLabel: \"Home\",\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={size} />\n          ),\n        }}\n        name=\"Home\"\n      >\n        {(screenProps) => (\n          <AppDrawer {...screenProps} updateAuthState={updateAuthState} />\n        )}\n      </Tab.Screen>\n      <Tab.Screen\n        options={{\n          tabBarLabel: \"Events\",\n          tabBarIcon: ({ color, size }) => (\n            <MaterialCommunityIcons name=\"calendar\" color={color} size={size} />\n          ),\n        }}\n        name=\"Show Events\"\n      >\n        {(screenProps) => (\n          <EventsNavigator {...screenProps} updateAuthState={updateAuthState} />\n        )}\n      </Tab.Screen>\n    </Tab.Navigator>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    { updateEmail, updatePassword, login, getUser },\n    dispatch\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabNavigator);\n"]},"metadata":{},"sourceType":"module"}