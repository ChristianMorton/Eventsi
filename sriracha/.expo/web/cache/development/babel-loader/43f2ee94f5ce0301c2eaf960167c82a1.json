{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianmorton/Eventsi/sriracha/src/components/GalleryComponent.js\";\n\nimport React, { useEffect, useCallback, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport \"firebase/storage\";\nimport * as firebase from \"firebase\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { getEventMedia } from \"../redux/actions/events\";\nimport ImageButton from \"./ImageButton\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar GalleryComponent = function GalleryComponent(_ref) {\n  var id = _ref.id,\n      getEventMedia = _ref.getEventMedia,\n      events = _ref.events,\n      chooseImage = _ref.chooseImage;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      eventMedia = _useState2[0],\n      setEventMedia = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refreshing = _useState4[0],\n      setRefreshing = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  var wait = function wait(timeout) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, timeout);\n    });\n  };\n\n  var onRefresh = useCallback(function () {\n    setRefreshing(true);\n    getEventMedia(id);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n  var storage = firebase.storage();\n\n  var renderItem = function renderItem(item) {\n    return React.createElement(TouchableOpacity, {\n      style: {\n        height: Dimensions.get(\"window\").width / 3,\n        maxHeight: Dimensions.get(\"window\").width / 3,\n        width: Dimensions.get(\"window\").width / 3,\n        maxWidth: Dimensions.get(\"window\").width / 3\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: item.item.url\n      },\n      style: styles.image,\n      resizeMode: \"stretch\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  useEffect(function () {\n    getEventMedia(id);\n    onRefresh();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"#f9e9d2\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 3,\n    data: events,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return \"key\" + item;\n    },\n    style: styles.flatList,\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: onRefresh,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), React.createElement(ImageButton, {\n    style: styles.button,\n    onPress: chooseImage,\n    icon: \"camera\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0\n  },\n  item: {\n    backgroundColor: \"#fefefe\",\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16\n  },\n  title: {\n    fontSize: 32\n  },\n  time: {\n    fontSize: 22\n  },\n  description: {\n    fontSize: 18\n  },\n  image: {\n    flex: 1,\n    height: Dimensions.get(\"window\").width / 3,\n    maxHeight: Dimensions.get(\"window\").width / 3,\n    width: Dimensions.get(\"window\").width / 3,\n    maxWidth: Dimensions.get(\"window\").width / 3,\n    overflow: \"visible\"\n  },\n  button: {\n    position: \"absolute\",\n    right: 5,\n    bottom: 5\n  },\n  flatList: {\n    backgroundColor: \"#f9e9d2\"\n  }\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getEventMedia: getEventMedia\n  }, dispatch);\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    events: state.events.currentEventMedia\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GalleryComponent);","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/components/GalleryComponent.js"],"names":["React","useEffect","useCallback","useState","firebase","connect","bindActionCreators","getEventMedia","ImageButton","TouchableOpacity","GalleryComponent","id","events","chooseImage","eventMedia","setEventMedia","refreshing","setRefreshing","loaded","setLoaded","wait","timeout","Promise","resolve","setTimeout","onRefresh","then","storage","renderItem","item","height","Dimensions","get","width","maxHeight","maxWidth","uri","url","styles","image","flex","backgroundColor","index","flatList","button","StyleSheet","create","container","marginTop","StatusBar","currentHeight","padding","marginVertical","marginHorizontal","title","fontSize","time","description","overflow","position","right","bottom","mapDispatchToProps","dispatch","mapStateToProps","state","currentEventMedia"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  RefreshControl,\n  Dimensions,\n  StatusBar,\n  Image,\n} from \"react-native\";\nimport \"firebase/storage\";\nimport * as firebase from \"firebase\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { getEventMedia } from \"../redux/actions/events\";\nimport ImageButton from \"./ImageButton\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nconst GalleryComponent = ({ id, getEventMedia, events, chooseImage }) => {\n  const [eventMedia, setEventMedia] = useState(null);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n\n  const wait = (timeout) => {\n    return new Promise((resolve) => setTimeout(resolve, timeout));\n  };\n\n  const onRefresh = useCallback(() => {\n    setRefreshing(true);\n    getEventMedia(id);\n    // setEventMedia(events.currentEventMedia);\n    //getURI();\n    //getEventMediaFunction();\n    wait(2000).then(() => setRefreshing(false));\n  }, []);\n\n  const storage = firebase.storage();\n\n  const renderItem = (item) => {\n    return (\n      <TouchableOpacity\n        style={{\n          height: Dimensions.get(\"window\").width / 3,\n          maxHeight: Dimensions.get(\"window\").width / 3,\n          width: Dimensions.get(\"window\").width / 3,\n          maxWidth: Dimensions.get(\"window\").width / 3,\n        }}\n      >\n        <Image\n          source={{\n            uri: item.item.url,\n          }}\n          style={styles.image}\n          resizeMode=\"stretch\"\n        />\n      </TouchableOpacity>\n    );\n  };\n\n  useEffect(() => {\n    getEventMedia(id);\n    onRefresh();\n  }, []);\n\n  return (\n    <View style={{ flex: 1, backgroundColor: \"#f9e9d2\" }}>\n      <FlatList\n        numColumns={3}\n        data={events}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => \"key\" + item}\n        style={styles.flatList}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      />\n      <ImageButton style={styles.button} onPress={chooseImage} icon=\"camera\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    backgroundColor: \"#fefefe\",\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16,\n  },\n  title: {\n    fontSize: 32,\n  },\n  time: {\n    fontSize: 22,\n  },\n  description: {\n    fontSize: 18,\n  },\n  image: {\n    flex: 1,\n    height: Dimensions.get(\"window\").width / 3,\n    maxHeight: Dimensions.get(\"window\").width / 3,\n    width: Dimensions.get(\"window\").width / 3,\n    maxWidth: Dimensions.get(\"window\").width / 3,\n    overflow: \"visible\",\n  },\n  button: {\n    position: \"absolute\",\n    right: 5,\n    bottom: 5,\n  },\n  flatList: {\n    backgroundColor: \"#f9e9d2\",\n  },\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ getEventMedia }, dispatch);\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    events: state.events.currentEventMedia,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GalleryComponent);\n"]},"metadata":{},"sourceType":"module"}