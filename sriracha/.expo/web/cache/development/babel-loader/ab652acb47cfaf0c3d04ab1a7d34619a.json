{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/christianmorton/Eventsi/sriracha/src/components/MapComponent.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport AppTextInput from \"./AppTextInput\";\nimport * as Location from \"expo-location\";\n\nvar MapComponent = function MapComponent(_ref) {\n  var style = _ref.style,\n      longitudeLatitude = _ref.longitudeLatitude,\n      setLongitudeLatitude = _ref.setLongitudeLatitude,\n      _ref$preGeopoint = _ref.preGeopoint,\n      preGeopoint = _ref$preGeopoint === void 0 ? null : _ref$preGeopoint,\n      navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchLocation = _useState2[0],\n      setSearchLocation = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postalAddress = _useState4[0],\n      setPostalAddress = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      arrayOfPossibleLocations = _useState6[0],\n      setArrayOfPossibleLocations = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searched = _useState8[0],\n      setSearched = _useState8[1];\n\n  var searchForLocation = function searchForLocation() {\n    return _regeneratorRuntime.async(function searchForLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Location.geocodeAsync(searchLocation).then(function (res) {\n              setArrayOfPossibleLocations(res);\n              setLongitudeLatitude({\n                coords: {\n                  longitude: res[0].longitude,\n                  latitude: res[0].latitude\n                }\n              });\n              Location.reverseGeocodeAsync({\n                longitude: res[0].longitude,\n                latitude: res[0].latitude\n              }).then(function (res) {\n                setPostalAddress(res.postalCode);\n                setSearched(true);\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context2.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== \"granted\")) {\n                _context2.next = 9;\n                break;\n              }\n\n              setErrorMsg(\"Permission to access location was denied\");\n              alert(\"You must enable location\");\n              navigation.navigate(\"InitialLogin\");\n              return _context2.abrupt(\"return\");\n\n            case 9:\n              if (!(preGeopoint == null)) {\n                _context2.next = 14;\n                break;\n              }\n\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n                accuracy: Location.Accuracy.High\n              }));\n\n            case 12:\n              location = _context2.sent;\n              setLongitudeLatitude(location);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  useEffect(function () {\n    var searchGeopoint = function searchGeopoint() {\n      return _regeneratorRuntime.async(function searchGeopoint$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (preGeopoint != null) {\n                setLongitudeLatitude({\n                  coords: {\n                    longitude: preGeopoint.longitude,\n                    latitude: preGeopoint.latitude\n                  }\n                });\n                Location.reverseGeocodeAsync({\n                  longitude: preGeopoint.longitude,\n                  latitude: preGeopoint.latitude\n                }).then(function (res) {\n                  var tempPostalAddress = \"\";\n\n                  if (res[0].name != null) {\n                    tempPostalAddress += res[0].name + \" \";\n                  }\n\n                  if (res[0].district != null) {\n                    tempPostalAddress += res[0].district + \" \";\n                  }\n\n                  if (res[0].street != null) {\n                    tempPostalAddress += res[0].street;\n                  }\n\n                  if (res[0].region != null) {\n                    tempPostalAddress += \", \" + res[0].region;\n                  }\n\n                  if (res[0].postalCode != null) {\n                    tempPostalAddress += \", \" + res[0].postalCode + \" \";\n                  }\n\n                  setPostalAddress(tempPostalAddress);\n                  setSearched(true);\n                }).catch(function (err) {\n                  return alert(err);\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    searchGeopoint();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      backgroundColor: \"#f9e9d2\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, preGeopoint == null ? React.createElement(View, {\n    style: styles.searchBarContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 9\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, React.createElement(AppTextInput, {\n    value: searchLocation,\n    onChangeText: function onChangeText(text) {\n      return setSearchLocation(text);\n    },\n    leftIcon: \"map-marker\",\n    placeholder: \"Search For Location\",\n    autoCapitalize: \"none\",\n    keyboardType: \"default\",\n    textContentType: \"none\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    style: {\n      flex: 1,\n      color: \"#9AB7D2\"\n    },\n    color: \"#9AB7D2\",\n    title: \"Search\",\n    onPress: searchForLocation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }))) : null, longitudeLatitude ? React.createElement(MapView, {\n    region: {\n      latitude: longitudeLatitude.coords.latitude,\n      longitude: longitudeLatitude.coords.longitude,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    },\n    style: style.map,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, searched ? React.createElement(Marker, {\n    index: 0,\n    coordinate: longitudeLatitude.coords,\n    title: postalAddress,\n    isPreselected: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }) : null) : React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"Allow location permissions\"));\n};\n\nvar styles = StyleSheet.create({\n  searchBarContainer: {\n    flexDirection: \"row\",\n    flex: 10\n  }\n});\nexport default MapComponent;","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/components/MapComponent.js"],"names":["React","useState","useEffect","MapView","Marker","AppTextInput","Location","MapComponent","style","longitudeLatitude","setLongitudeLatitude","preGeopoint","navigation","searchLocation","setSearchLocation","postalAddress","setPostalAddress","arrayOfPossibleLocations","setArrayOfPossibleLocations","searched","setSearched","searchForLocation","geocodeAsync","then","res","coords","longitude","latitude","reverseGeocodeAsync","postalCode","requestPermissionsAsync","status","setErrorMsg","alert","navigate","getCurrentPositionAsync","accuracy","Accuracy","High","location","searchGeopoint","tempPostalAddress","name","district","street","region","catch","err","backgroundColor","styles","searchBarContainer","flex","text","color","latitudeDelta","longitudeDelta","map","StyleSheet","create","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Text, StyleSheet, Button } from \"react-native\";\nimport MapView, { Marker } from \"react-native-maps\";\nimport AppTextInput from \"./AppTextInput\";\nimport * as Location from \"expo-location\";\n\nconst MapComponent = ({\n  style,\n  longitudeLatitude,\n  setLongitudeLatitude,\n  preGeopoint = null,\n  navigation,\n}) => {\n  const [searchLocation, setSearchLocation] = useState(\"\");\n  const [postalAddress, setPostalAddress] = useState(\"\");\n  const [arrayOfPossibleLocations, setArrayOfPossibleLocations] = useState(\n    null\n  ); // Here because we might use in future tbh\n\n  const [searched, setSearched] = useState(false);\n  const searchForLocation = async () => {\n    Location.geocodeAsync(searchLocation).then((res) => {\n      setArrayOfPossibleLocations(res);\n      setLongitudeLatitude({\n        coords: { longitude: res[0].longitude, latitude: res[0].latitude },\n      });\n      Location.reverseGeocodeAsync({\n        longitude: res[0].longitude,\n        latitude: res[0].latitude,\n      }).then((res) => {\n        setPostalAddress(res.postalCode);\n        setSearched(true);\n      });\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestPermissionsAsync();\n      if (status !== \"granted\") {\n        setErrorMsg(\"Permission to access location was denied\");\n        alert(\"You must enable location\");\n        navigation.navigate(\"InitialLogin\");\n        return;\n      }\n      if (preGeopoint == null) {\n        let location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High,\n        });\n        setLongitudeLatitude(location);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    const searchGeopoint = async () => {\n      if (preGeopoint != null) {\n        setLongitudeLatitude({\n          coords: {\n            longitude: preGeopoint.longitude,\n            latitude: preGeopoint.latitude,\n          },\n        });\n        Location.reverseGeocodeAsync({\n          longitude: preGeopoint.longitude,\n          latitude: preGeopoint.latitude,\n        })\n          .then((res) => {\n            var tempPostalAddress = \"\";\n            if (res[0].name != null) {\n              tempPostalAddress += res[0].name + \" \";\n            }\n            if (res[0].district != null) {\n              tempPostalAddress += res[0].district + \" \";\n            }\n            if (res[0].street != null) {\n              tempPostalAddress += res[0].street;\n            }\n            if (res[0].region != null) {\n              tempPostalAddress += \", \" + res[0].region;\n            }\n            if (res[0].postalCode != null) {\n              tempPostalAddress += \", \" + res[0].postalCode + \" \";\n            }\n\n            setPostalAddress(tempPostalAddress);\n            setSearched(true);\n          })\n          .catch((err) => alert(err));\n      }\n    };\n    searchGeopoint();\n  }, []);\n  return (\n    <View style={{ backgroundColor: \"#f9e9d2\" }}>\n      {preGeopoint == null ? (\n        <View style={styles.searchBarContainer}>\n          <View style={{ flex: 9 }}>\n            <AppTextInput\n              value={searchLocation}\n              onChangeText={(text) => setSearchLocation(text)}\n              leftIcon=\"map-marker\"\n              placeholder=\"Search For Location\"\n              autoCapitalize=\"none\"\n              keyboardType=\"default\"\n              textContentType=\"none\"\n            />\n            <Button\n              style={{ flex: 1, color: \"#9AB7D2\" }}\n              color={\"#9AB7D2\"}\n              title=\"Search\"\n              onPress={searchForLocation}\n            />\n          </View>\n        </View>\n      ) : null}\n\n      {longitudeLatitude ? (\n        <MapView\n          region={{\n            latitude: longitudeLatitude.coords.latitude,\n            longitude: longitudeLatitude.coords.longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421,\n          }}\n          style={style.map}\n        >\n          {searched ? (\n            <Marker\n              index={0}\n              coordinate={longitudeLatitude.coords}\n              title={postalAddress}\n              isPreselected={true}\n            />\n          ) : null}\n        </MapView>\n      ) : (\n        <Text>Allow location permissions</Text>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  searchBarContainer: {\n    flexDirection: \"row\",\n    flex: 10,\n  },\n});\n\nexport default MapComponent;\n"]},"metadata":{},"sourceType":"module"}