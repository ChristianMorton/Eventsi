{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Firebase, { db } from \"../../config/Firebase\";\nimport \"firebase/storage\";\nexport var GET_MY_EVENTS = \"GET_MY_EVENTS\";\nexport var CREATE_EVENT = \"CREATE_EVENT\";\nexport var GET_EVENT_MEDIA = \"GET_EVENT_MEDIA\";\nexport var GET_EVENT_POSTS = \"GET_EVENT_POSTS\";\nexport var getMyEvents = function getMyEvents() {\n  return function _callee(dispatch, getState) {\n    var currentuser, res, myEvents, orderedRes;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            currentuser = Firebase.auth().currentUser;\n\n            if (!currentuser) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").where(\"invited.\" + currentuser.uid + \".status\", \"in\", [\"invited\", \"going\", \"maybe\"]).get());\n\n          case 5:\n            res = _context.sent;\n\n            if (res) {\n              myEvents = [];\n              res.forEach(function (doc) {\n                return myEvents.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id,\n                  ref: doc.ref\n                }));\n              });\n              orderedRes = myEvents.sort(function (a, b) {\n                return a.time.toMillis() - b.time.toMillis();\n              });\n              dispatch({\n                type: GET_MY_EVENTS,\n                payload: orderedRes\n              });\n            }\n\n            return _context.abrupt(\"return\", Promise.resolve());\n\n          case 8:\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            alert(_context.t0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n};\nexport var createEvent = function createEvent(eventData) {\n  return function _callee2(dispatch, getState) {\n    var currentuser, testuid, invitedVariable, res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            currentuser = Firebase.auth().currentUser;\n\n            if (!currentuser) {\n              _context2.next = 9;\n              break;\n            }\n\n            testuid = \"\" + currentuser.uid;\n            invitedVariable = _defineProperty({}, testuid, {\n              status: \"going\",\n              name: getState().user.name\n            });\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").add(_objectSpread(_objectSpread({}, eventData), {}, {\n              owners: [testuid],\n              invited: invitedVariable\n            })));\n\n          case 7:\n            res = _context2.sent;\n            dispatch({\n              type: CREATE_EVENT,\n              payload: res.id\n            });\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            alert(_context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var getEventPosts = function getEventPosts(idOfEvent) {\n  var storage = Firebase.storage();\n  return function _callee3(dispatch, getState) {\n    var uid, res, eventInfo;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            uid = Firebase.auth().currentUser.uid;\n\n            if (!uid) {\n              _context3.next = 7;\n              break;\n            }\n\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").doc(idOfEvent).collection(\"posts\").get());\n\n          case 5:\n            res = _context3.sent;\n\n            if (res) {\n              eventInfo = [];\n              res.forEach(function (doc) {\n                eventInfo.push({\n                  id: doc.id,\n                  text: doc.data().text,\n                  name: doc.data().name\n                });\n              });\n              console.log(eventInfo);\n              dispatch({\n                type: GET_EVENT_POSTS,\n                payload: eventInfo\n              });\n            }\n\n          case 7:\n            _context3.next = 13;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            alert(_context3.t0);\n            console.log(_context3.t0);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var getEventMedia = function getEventMedia(idOfEvent) {\n  var storage = Firebase.storage();\n  return function _callee4(dispatch, getState) {\n    var uid, res, eventInfo;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            uid = Firebase.auth().currentUser.uid;\n\n            if (!uid) {\n              _context4.next = 7;\n              break;\n            }\n\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").doc(idOfEvent).collection(\"media\").get());\n\n          case 5:\n            res = _context4.sent;\n\n            if (res) {\n              eventInfo = [];\n              res.forEach(function (doc) {\n                var storageVar = storage.ref(\"events/\" + idOfEvent + \"/media/\" + doc.data().slug);\n                storageVar.getDownloadURL().then(function (url) {\n                  eventInfo.push({\n                    id: doc.id,\n                    url: url,\n                    slug: doc.data().slug,\n                    name: doc.data().name\n                  });\n                }).catch(function (error) {\n                  console.log(error);\n                });\n              });\n              dispatch({\n                type: GET_EVENT_MEDIA,\n                payload: eventInfo\n              });\n            }\n\n          case 7:\n            _context4.next = 13;\n            break;\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            alert(_context4.t0);\n            console.log(_context4.t0);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var joinEvent = function joinEvent(idOfEvent) {\n  var storage = Firebase.storage();\n  return function _callee5(dispatch, getState) {\n    var uid, testuid, invitedVariable, res;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            uid = Firebase.auth().currentUser.uid;\n\n            if (!uid) {\n              _context5.next = 9;\n              break;\n            }\n\n            testuid = \"\" + uid;\n            invitedVariable = _defineProperty({}, testuid, {\n              status: \"invited\",\n              name: getState().user.name\n            });\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").doc(idOfEvent).set({\n              invited: invitedVariable\n            }, {\n              merge: true\n            }));\n\n          case 7:\n            res = _context5.sent;\n            dispatch(getMyEvents());\n\n          case 9:\n            _context5.next = 15;\n            break;\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](0);\n            alert(_context5.t0);\n            console.log(_context5.t0);\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var changeStatus = function changeStatus(idOfEvent, status) {\n  var storage = Firebase.storage();\n  return function _callee6(dispatch, getState) {\n    var uid, testuid, invitedVariable, res;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            uid = Firebase.auth().currentUser.uid;\n\n            if (!uid) {\n              _context6.next = 9;\n              break;\n            }\n\n            testuid = \"\" + uid;\n            invitedVariable = _defineProperty({}, testuid, {\n              status: status,\n              name: getState().user.name\n            });\n            _context6.next = 7;\n            return _regeneratorRuntime.awrap(db.collection(\"events\").doc(idOfEvent).set({\n              invited: invitedVariable\n            }, {\n              merge: true\n            }));\n\n          case 7:\n            res = _context6.sent;\n            dispatch(getMyEvents());\n\n          case 9:\n            _context6.next = 15;\n            break;\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](0);\n            alert(_context6.t0);\n            console.log(_context6.t0);\n\n          case 15:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/christianmorton/Eventsi/sriracha/src/redux/actions/events.js"],"names":["Firebase","db","GET_MY_EVENTS","CREATE_EVENT","GET_EVENT_MEDIA","GET_EVENT_POSTS","getMyEvents","dispatch","getState","currentuser","auth","currentUser","collection","where","uid","get","res","myEvents","forEach","doc","push","data","id","ref","orderedRes","sort","a","b","time","toMillis","type","payload","Promise","resolve","alert","console","log","createEvent","eventData","testuid","invitedVariable","status","name","user","add","owners","invited","getEventPosts","idOfEvent","storage","eventInfo","text","getEventMedia","storageVar","slug","getDownloadURL","then","url","catch","error","joinEvent","set","merge","changeStatus"],"mappings":"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","sourcesContent":["import Firebase, { db } from \"../../config/Firebase\";\nimport \"firebase/storage\";\n\n//constants\nexport const GET_MY_EVENTS = \"GET_MY_EVENTS\";\nexport const CREATE_EVENT = \"CREATE_EVENT\";\nexport const GET_EVENT_MEDIA = \"GET_EVENT_MEDIA\";\nexport const GET_EVENT_POSTS = \"GET_EVENT_POSTS\";\n\n// actions\n\nexport const getMyEvents = () => {\n  return async (dispatch, getState) => {\n    try {\n      const currentuser = Firebase.auth().currentUser;\n\n      if (currentuser) {\n        const res = await db\n          .collection(\"events\")\n          .where(\"invited.\" + currentuser.uid + \".status\", \"in\", [\n            \"invited\",\n            \"going\",\n            \"maybe\",\n          ])\n          .get();\n\n        if (res) {\n          const myEvents = [];\n          res.forEach((doc) =>\n            myEvents.push({\n              ...doc.data(),\n              id: doc.id,\n              ref: doc.ref,\n            })\n          );\n          const orderedRes = myEvents.sort(function (a, b) {\n            return a.time.toMillis() - b.time.toMillis();\n          });\n          dispatch({ type: GET_MY_EVENTS, payload: orderedRes });\n        }\n        return Promise.resolve();\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n\nexport const createEvent = (eventData) => {\n  return async (dispatch, getState) => {\n    try {\n      const currentuser = Firebase.auth().currentUser;\n      if (currentuser) {\n        const testuid = `${currentuser.uid}`;\n        const invitedVariable = {\n          [testuid]: { status: \"going\", name: getState().user.name },\n        };\n        const res = await db.collection(\"events\").add({\n          ...eventData,\n          owners: [testuid],\n          invited: invitedVariable,\n        });\n        dispatch({ type: CREATE_EVENT, payload: res.id });\n      }\n    } catch (e) {\n      alert(e);\n    }\n  };\n};\n\nexport const getEventPosts = (idOfEvent) => {\n  const storage = Firebase.storage();\n\n  return async (dispatch, getState) => {\n    try {\n      const uid = Firebase.auth().currentUser.uid;\n      if (uid) {\n        const res = await db\n          .collection(\"events\")\n          .doc(idOfEvent)\n          .collection(\"posts\")\n          .get();\n        if (res) {\n          const eventInfo = [];\n          res.forEach((doc) => {\n            eventInfo.push({\n              id: doc.id,\n              text: doc.data().text,\n              name: doc.data().name,\n            });\n          });\n          console.log(eventInfo);\n\n          dispatch({ type: GET_EVENT_POSTS, payload: eventInfo });\n        }\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n\nexport const getEventMedia = (idOfEvent) => {\n  const storage = Firebase.storage();\n\n  return async (dispatch, getState) => {\n    try {\n      const uid = Firebase.auth().currentUser.uid;\n      if (uid) {\n        const res = await db\n          .collection(\"events\")\n          .doc(idOfEvent)\n          .collection(\"media\")\n          .get();\n\n        if (res) {\n          const eventInfo = [];\n          res.forEach((doc) => {\n            const storageVar = storage.ref(\n              \"events/\" + idOfEvent + \"/media/\" + doc.data().slug\n            );\n            storageVar\n              .getDownloadURL()\n              .then((url) => {\n                eventInfo.push({\n                  id: doc.id,\n                  url: url,\n                  slug: doc.data().slug,\n                  name: doc.data().name,\n                });\n              })\n              .catch((error) => {\n                console.log(error);\n              });\n          });\n          dispatch({ type: GET_EVENT_MEDIA, payload: eventInfo });\n        }\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n\nexport const joinEvent = (idOfEvent) => {\n  const storage = Firebase.storage();\n\n  return async (dispatch, getState) => {\n    try {\n      const uid = Firebase.auth().currentUser.uid;\n      if (uid) {\n        const testuid = `${uid}`;\n        const invitedVariable = {\n          [testuid]: { status: \"invited\", name: getState().user.name },\n        };\n        const res = await db\n          .collection(\"events\")\n          .doc(idOfEvent)\n          .set({ invited: invitedVariable }, { merge: true });\n\n        dispatch(getMyEvents());\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n\nexport const changeStatus = (idOfEvent, status) => {\n  const storage = Firebase.storage();\n\n  return async (dispatch, getState) => {\n    try {\n      const uid = Firebase.auth().currentUser.uid;\n      if (uid) {\n        const testuid = `${uid}`;\n        const invitedVariable = {\n          [testuid]: { status: status, name: getState().user.name },\n        };\n        const res = await db\n          .collection(\"events\")\n          .doc(idOfEvent)\n          .set({ invited: invitedVariable }, { merge: true });\n\n        dispatch(getMyEvents());\n      }\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}